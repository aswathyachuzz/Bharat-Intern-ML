# -*- coding: utf-8 -*-
"""House Price Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10x6vkYe3UyGpGiz12ZABpXX8Ows5iAc1
"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
import numpy as np

data=pd.read_csv("/content/drive/MyDrive/ParisHousing.csv")

data.head()

data.shape

data.info()

for column in data.columns:
  print(data[column].value_counts())
  print("*"*20)

data.isna().sum()

data.drop(columns=['hasYard','cityPartRange','numPrevOwners','made','isNewBuilt','hasStormProtector','basement','attic','hasStorageRoom','hasGuestRoom'],inplace=True)

data.describe()

data.info()

data['numberOfRooms'].value_counts()

data.head()

data['price_per_sqft']=data['price']*100000/data['squareMeters']

data['price_per_sqft']

data.describe()

data.shape

data

data.drop(columns=['price_per_sqft'],inplace=True)

data.head()

data.drop(columns=['garage','floors'],inplace=True)

data.to_csv("final_dataset.csv")

x=data.drop(columns=['price'])
y=data['price']

from sklearn.model_selection import train_test_split
from sklearn. linear_model import LinearRegression, Lasso, Ridge
from sklearn.preprocessing import OneHotEncoder, StandardScaler
from sklearn. compose import make_column_transformer
from sklearn.pipeline import make_pipeline
from sklearn.metrics import r2_score

X_train,X_test,y_train,y_test = train_test_split(x,y, test_size=0.2, random_state=0)
print(X_train. shape)
print (y_train.shape)

column_trans = make_column_transformer ((OneHotEncoder (sparse=False), ['numberOfRooms']), remainder= 'passthrough')

scaler=StandardScaler()

from sklearn.linear_model import LinearRegression
lr=LinearRegression()

from sklearn. linear_model import LinearRegression
from sklearn.preprocessing import StandardScaler
# X being feature matrix
scaler = StandardScaler()
x_scaled = scaler. fit_transform(x)
lr = LinearRegression()
lr. fit(x_scaled, y)

pipe=make_pipeline(column_trans,scaler,lr)

pipe.fit(X_train,y_train)

y_pred_lr=pipe.predict(X_test)

r2_score(y_test,y_pred_lr)

lasso=Lasso()

pipe=make_pipeline(column_trans,scaler,lasso)

pipe.fit(X_train,y_train)

y_pred_lasso=pipe.predict(X_test)

r2_score(y_test,y_pred_lasso)

ridge=Ridge()

pipe=make_pipeline(column_trans,scaler,ridge)

pipe.fit(X_train,y_train)

y_pred_ridge=pipe.predict(X_test)

r2_score(y_test,y_pred_ridge)

print("No Regularization: ", r2_score(y_test,y_pred_lr))
print ("Lasso: ", r2_score(y_test, y_pred_lasso))
print("Ridge:", r2_score(y_test,y_pred_ridge))

import pickle

pickle.dump(pipe,open('RidgeModel.pkl','wb'))

